pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '2'))
    disableConcurrentBuilds()
  }

  triggers {
    cron '@midnight'
  }

  parameters {
    string(name: 'engineDownloadUrl', defaultValue: 'https://jenkins.ivyteam.io/job/core_product-engine/job/master/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/*_Slim_*.zip/*zip*/products.zip', description: 'engine that will be packaged')
  }

  stages {
    stage('Build') {
      agent {
        dockerfile {
          filename 'build/Dockerfile'
          reuseNode true
        }
      }

      steps {
        script {
          sh 'npm run update:axonivy:next'
          sh 'npm install'
          sh 'npm run build:production'
          sh 'npm run download:engine ' + params.engineDownloadUrl
        }
      }
    }

    stage('Playwright Tests') {
      agent {
        docker {
          image 'docker-registry.ivyteam.io/axonivy/playwright-jdk21:dev'
          reuseNode true
        }
      }

      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh 'export JAVA_OPTS_IVY_SYSTEM="-Divy.engine.testheadless=true -Ddev.mode=true"'
            sh 'nohup bash -c "extension/AxonIvyEngine/bin/AxonIvyEngine &"'
            sh 'npm run test:playwright:download:vscode'
            sh 'xvfb-run --auto-servernum npm run test:playwright'
          }
          archiveArtifacts artifacts: '**/playwright/playwright-videos/**', allowEmptyArchive: true
          withChecks('WebTests') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: '**/node_modules/**/report.xml'
          }
        }
      }
    }

    stage('Protocol') {
      when {
        expression { isReleasingBranch() }
      }
      agent {
        dockerfile {
          filename 'build/Dockerfile'
          reuseNode true
        }
      }
      steps {
        catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
          script {
            sh 'npm run download:openapi https://dev.demo.ivyteam.io'
            sh 'npm run codegen:openapi'
            sh 'npm run type'
            sh 'npm run lint:ci'
          }
        }
        withChecks('Integration Protocol ESLint') {
          recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(id: 'latest', pattern: 'extension/**/eslint.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
        }
      }
    }
  }

  post {
    success {
      cleanWs()
    }
  }
} 