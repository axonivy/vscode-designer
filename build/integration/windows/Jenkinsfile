pipeline {
  agent {
    label 'windows-vscode'
  }

  tools {
    jdk 'temurin-jdk-21.0.6.7'
    maven '3.9'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '2'))
    disableConcurrentBuilds()
  }

  triggers {
    cron '@midnight'
  }

  environment {
    JAVA_OPTS_IVY_SYSTEM = '-Ddev.mode=true -Divy.engine.testheadless=true'
    CI = 'true'
    RUN_STABLE_VERSION = 'true'
  }

  stages {
    stage('Build') {
      steps {
        nodejs(nodeJSInstallationName: '22.21.0') {
          bat 'npm run update:axonivy:next'
          bat 'npm install'
          bat 'npm run build:production'
          bat 'npm run engine:download'
        }
      }
    }

    stage('Playwright Tests') {
      steps {
        nodejs(nodeJSInstallationName: '22.21.0') {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            bat 'start extension/AxonIvyEngine/bin/AxonIvyEngine.exe'
            bat 'npm run test:playwright:download:vscode'
            bat 'npm run test:playwright'
            bat 'start extension/AxonIvyEngine/bin/AxonIvyEngine.exe stop'
          }
          archiveArtifacts artifacts: '**/playwright/playwright-videos/**', allowEmptyArchive: true
          withChecks('WebTests') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: '**/node_modules/**/report.xml'
          }
        }
      }
    }

    stage('Protocol') {
      when {
        expression { isReleasingBranch() }
      }
      steps {
        nodejs(nodeJSInstallationName: '22.21.0') {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            script {
              bat 'npm run openapi:download'
              bat 'npm run openapi:codegen'
              bat 'npm run type'
              bat 'npm run lint:ci'
            }
          }
          withChecks('Integration Protocol ESLint') {
            recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(id: 'latest', pattern: 'extension/**/eslint.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
          }
        }
      }
    }
  }

  post {
    success {
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        cleanWs()
      }
    }
  }
}
