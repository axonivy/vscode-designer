pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '2'))
    disableConcurrentBuilds()
  }

  triggers {
    cron '@midnight'
  }

  parameters {
    string(name: 'engineDownloadUrl', defaultValue: 'https://jenkins.ivyteam.io/job/core_product-engine/job/master/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/*_Slim_*.zip/*zip*/products.zip', description: 'engine that will be packaged')
  }

  stages {
    stage('Build') {
      agent {
        dockerfile {
          filename 'build/Dockerfile'
          reuseNode true
        }
      }

      steps {
        script {
          sh 'yarn update:axonivy:next'
          sh 'yarn install'
          sh 'yarn build:production'
          sh 'yarn download:engine ' + params.engineDownloadUrl
          sh 'yarn package'
        }
      }
    }

    stage('Networking with Alex') {
      steps {
        script {
          def random = (new Random()).nextInt(10000000)
          def networkName = "build-" + random
          def openvscodeServerName = "ivy-" + random
          try {
            sh "docker network create ${networkName}"
            docker.build('openvscode-server', '-f build/integration/openvscode-server/Dockerfile_server .').withRun("--name ${openvscodeServerName} --network ${networkName}", "--disable-workspace-trust") {
              sh '/home/.openvscode-server/bin/openvscode-server --version'
              docker.image("mcr.microsoft.com/playwright:v1.38.1-jammy").inside("-e CI true --network ${networkName} --OPENVSCODE_SERVER_HOST ${openvscodeServerName}") {
                sh 'yarn test:playwright:browser'
              }
            }
          } finally {
            sh "docker network rm ${networkName}"
          }
        }
      }
    }

    stage('Playwright Tests') {
      agent {
        dockerfile {
          filename 'build/integration/openvscode-server/Dockerfile-playwright'
          reuseNode true
        }
      }

      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh 'yarn test:playwright:browser'
          }
          archiveArtifacts artifacts: '**/playwright/test-results/**', allowEmptyArchive: true
          withChecks('WebTests') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: '**/node_modules/**/report.xml'
          }
        }
      }
    }
  }

  post {
    success {
      cleanWs()
    }
  }
} 
