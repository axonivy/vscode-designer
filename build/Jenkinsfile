pipeline {
  agent {
    dockerfile {
      filename 'build/Dockerfile'
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '2'))
  }

  triggers {
    cron '@midnight'
    upstream(upstreamProjects: "core_product-engine/${java.net.URLEncoder.encode(env.BRANCH_NAME, 'UTF-8')},process-editor-client/${java.net.URLEncoder.encode(env.BRANCH_NAME, 'UTF-8')}", threshold: hudson.model.Result.UNSTABLE)
  }

  parameters {
    string(name: 'engineDownloadUrl', defaultValue: 'https://jenkins.ivyteam.io/job/core_product-engine/job/master/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/*_Slim_*.zip/*zip*/products.zip', description: 'engine that will be packaged')
    booleanParam(name: 'publishToMarket', defaultValue: false, description: 'Publish to VS Code Marketplace?')
  }

  stages {
    stage('Build') {
      steps {
        script {
          sh 'npm run update:axonivy:next'
          sh 'npm install'
          sh 'npm run build:production'
        }
      }
    }

    stage('Codechecks (ESLint)') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
            timeout(30) {
              sh 'npm run lint:ci'
            }
          }
          withChecks('ESLint') {
            recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(pattern: 'extension/**/eslint.xml', skipSymbolicLinks: true)], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
          }
        }
      }
    }

    stage('Publish to VS Code Marketplace') {
      when{
        expression { params.publishToMarket }
      }
      steps {
        withCredentials([string(credentialsId: 'marketplace.visualstudio.com', variable: 'VSCE_PAT')]) {
          script {
            sh 'npm run publish:next'
          }
        }
      }
    }

    stage('Package') {
      steps {
        script {
          sh 'npm run package'
          sh 'npm run download:engine ' + params.engineDownloadUrl
          sh 'npm run package:with:engine'
          archiveArtifacts 'extension/**/*.vsix'
        }
      }
    }
  }

  post {
    success {
      cleanWs()
    }
  }
} 
